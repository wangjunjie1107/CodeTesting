#include<stdio.h>
#include<stdlib.h>


/*
代码区（text segment）:
		加载的是可执行文件代码段，
		所有的可执行代码都加载到代码区，
		这块内存是不可以在运行期间修改的。

未初始化数据区（BSS）:
		加载的是可执行文件BSS段，
		位置可以分开亦可以紧靠数据段，
		存储于数据段的数据（全局未初始化，静态未初始化数据）的生存周期为整个程序运行过程。

全局初始化数据区/静态数据区（data segment）:
		加载的是可执行文件数据段，
		存储于数据段（全局初始化，静态初始化数据，文字常量(只读)）的数据的
		生存周期为整个程序运行过程。

栈区（stack）:
		栈是一种先进后出的内存结构，
		由编译器自动分配释放，存放函数的参数值、返回值、局部变量等。
		在程序运行过程中实时加载和释放，因此，局部变量的生存周期为申请到释放该段栈空间。

堆区（heap）
		堆是一个大容器，它的容量要远远大于栈，
		但没有栈那样先进后出的顺序。用于动态内存分配。
		堆在内存中位于BSS区和栈区之间。一般由程序员分配和释放，
		若程序员不释放，程序结束时由操作系统回收。
*/


int a;
static int b;
int c = 20;
static int d = 10;

int main() 
{
	int e;
	int f = 0;
	static int g;
	static int h = 10;
	
	char *i = "test";
	char *k = NULL;
	
	printf("&a\t %p\t //局部未初始化变量\n", &e);
	printf("&b\t %p\t //局部初始化变量\n", &f);

	printf("&c\t %p\t //静态局部未初始化变量\n", &g);
	printf("&d\t %p\t //静态局部初始化变量\n", &h);

	printf("&e\t %p\t //全局未初始化变量\n", &a);
	printf("&f\t %p\t //全局静态未初始化变量\n", &b);

	printf("&g\t %p\t //全局初始化变量\n", &c);
	printf("&h\t %p\t //全局静态初始化变量\n", &d);

	printf("i\t %p\t //只读数据(文字常量区)\n", i);

	k = (char *)malloc(10);
	printf("k\t %p\t //动态分配的内存\n", k); 
	
	return 0;
}
