#define _CRT_SECURE_NO_WARNINGS
#include<string>
#include<iostream>
using namespace std;

//静态成员变量 

//1、所有对象都共享同一份静态成员
//2、在编译阶段就分配了内存
//3、必须在类内声明、类外初始化


class Person
{
public:

	Person()
	{
		//m_A = 100; //不要在构造函数内给静态成员变量初始化
	}


	//静态成员函数 只有一份
	static void func()
	{
		cout << "func静态成员函数调用" << endl;
		m_A = 1000;  //静态成员变量可以修改
		//m_C = 1000000;//非静态成员变量无法修改
	}


	//非静态成员函数，可以访问静态和非静态成员变量
	void func2()
	{
		//静态成员变量和非静态成员变量都可以修改
		m_C = 12;
		m_A = 4564;
	}

	static int m_A;

	int m_C;//非静态成员变量

private:
	static int m_B;//私有静态成员变量

	static void func3()//私有静态成员函数 类外访问不到
	{
		cout << "func3静态成员函数调用" << endl;
	}
};

//静态成员变量的类外初始化
//即使私有权限下的静态成员变量 也要在类外进行初始化
int Person::m_A = 100; 
int Person::m_B = 1000;

//1、基本语法
void test01()
{
	Person p1;
	cout << "p1.m_A = " << p1.m_A << endl;

	Person p2;
	p1.m_A = 1516;
	cout << "p2.m_A = " << p2.m_A << endl;
}


//2、静态成员变量访问方式
void test02()
{
	//1、通过对象访问
	Person p1;
	cout <<  "p1.m_A = " <<p1.m_A << endl;

	//2、通过类名访问
	cout << "Person::m_A = " << Person::m_A << endl;
}


//3、静态成员变量也是有访问权限的
void test03()
{
	Person p1;
	cout <<"p1.m_A = "<< p1.m_A << endl;//公共权限

	//p1.m_B;//私有权限不可以访问
}


//静态成员函数
void test04()
{
	//访问方式1：通过对象
	Person p1;
	p1.func();//静态成员函数访问

	//访问方式2：通过类名
	Person::func();

	//Person::func3();//访问不到 私有权限下的静态成员函数

}


int main()
{
	//test01();
	//test02();
	test04();

	system("pause");
	return EXIT_SUCCESS;
}

